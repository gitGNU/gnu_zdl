#!/bin/bash -i
#
# ZigzagDownLoader (ZDL)
# 
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program. If not, see http://www.gnu.org/licenses/. 
# 
# Copyright (C) 2011: Gianluca Zoni (zoninoz) <zoninoz@inventati.org>
# 
# For information or to collaborate on the project:
# https://savannah.nongnu.org/projects/zdl
# 
# Gianluca Zoni (author)
# http://inventati.org/zoninoz
# zoninoz@inventati.org
#

path_usr="/usr/local/share/zdl"

source $path_usr/docs/help.sh
source $path_usr/config.sh
source $path_usr/config_manager.sh
source $path_usr/axel_installer.sh

source $path_usr/libs/common.sh
source $path_usr/libs/downloader_manager.sh
source $path_usr/libs/DLstdout_parser.sh
source $path_usr/libs/extension_utils.sh
source $path_usr/libs/login.sh
source $path_usr/libs/ip_changer.sh
source $path_usr/libs/log.sh

source $path_usr/ui/widgets.sh
source $path_usr/ui/ui.sh

function update_updater {
    URL_ROOT="http://download.savannah.gnu.org/releases/zdl/"

    header_box "Aggiornamento automatico di $name_prog"

    mkdir -p "$path_tmp"
    cd "$path_tmp"
    rm -fr *.gz *.sig "$prog" 2>/dev/null
    print_c 1 "Download in corso: attendere..."
    wget "$URL_ROOT" -r -l 1 -A sig -np -nd -q 2>/dev/null
    cd ..
    if [ -f "$path_conf"/zdl.sig ]; then
	test_version=$(diff "$path_conf"/zdl.sig "$path_tmp"/*.sig )
    fi
    if [ -z "$test_version" ] && [ -f "$path_conf"/zdl.sig ]; then
	print_c 1 "$PROG è già alla versione più recente"
    else
	cd "$path_tmp"
######## tarball dal mirror (aggiornamento lento):
##	wget "$URL_ROOT" -r -l 1 -A gz,txt -np -nd -q 2>/dev/null

######## tarball dal repository git (aggiornamento rapido: disponibile subito con -u --force):
	wget "http://git.savannah.gnu.org/cgit/zdl.git/snapshot/zdl-1.0.tar.gz" -q 2>/dev/null
	package=$(ls *.tar.gz)
	print_c 1 "Aggiornamento di $PROG con $package"
	tar -xzf "$package"

	mv "${package%.tar.gz}" $prog
	cd $prog

	source updater.sh
	update
    fi
}


args=( "$@" )

tags=( `ps ax |sed -n '1p'` )
for i in `seq 0 $(( ${#tags[*]}-1 ))`; do
    j=$(( $i+1 ))
    [ "${tags[$i]}" == "PID" ] && ps_ax_pid="\$$j"
    [ "${tags[$i]}" == "TTY" ] && ps_ax_tty="\$$j"
done

## è una pipe?
stdin="$(ls -l /dev/fd/0)"
stdin="${stdin/*-> /}"
if [ "${stdin}" != "${stdin//'pipe:['}" ]; then    
    pipe=$(cat /dev/fd/0)
    exec 0<$(echo /dev/$(ps ax| grep ^[\ ]*$$ | awk "{print $ps_ax_tty}"))
    for pipezed in $pipe; do
	args[${#args[*]}]="$pipezed"
    done
    unset pipe
fi

max_args=$(( ${#args[*]}-1 ))

if [[ "${args[*]}" =~ ^-[a-zA-Z]+ ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^-[a-zA-Z]+$ ]]; then
	    for ((j=1; j<${#args[$i]}; j++)); do
	        args[${#args[*]}]="-${args[$i]:$j:1}"
	    done
	    args[$i]=${args[$(( ${#args[*]}-1 ))]}
	    unset args[$(( ${#args[*]}-1 ))]
	fi
    done
    max_args=$(( ${#args[*]}-1 ))
fi


if [ "${args[*]}" == "${args[*]//--silent}" ] && [ "${args[*]}" == "${args[*]//--stream}" ]; then
    for i in `seq 0 $max_args`; do
	if [ -d "${args[$i]}" ]; then
	    cd "${args[$i]}"
	    unset args[$i]
#	    break
	fi
    done
fi

#### MAIN
init

if [[ "${args[*]}" =~ \-\-(mg|nano|mcedit|vi|vim|emacs|emacs-nw|jed|zile|jupp) ]]; then
    for i in $(seq 0 $max_args); do
	if [[ "${args[$i]}" =~ ^\-\-(mg|nano|mcedit|vi|vim|emacs|emacs-nw|jed|zile|jupp)$ ]]; then
	    [[ $(command -v "${BASH_REMATCH[1]//-*}" 2>/dev/null) ]] && editor="${BASH_REMATCH[1]//-/ -}"
	    unset args[$i]
	    from_editor=true
	fi
    done
fi

if [[ "${args[*]}" =~ (--editor|-e) ]]; then
    for i in $(seq 0 $max_args); do
	if [[ "${args[$i]}" =~ ^(--editor|-e)$ ]]; then
	    unset args[$i]
	    from_editor=true
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--silent}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == "--silent" ]; then
	    unset args[$i]
	    daemon="true"
	    sleeping_pause=5
	fi
	if [ "${args[$i]}" == "$PWD" ]; then
	    unset args[$i]
	fi
    done
fi


## conkeror
if [ "${args[*]}" != "${args[*]//--zigzag-xterm}" ]; then
    if [ "$daemon" != "true" ]; then 
	if [ -z "$DISPLAY" ]; then
	    export DISPLAY=":0"
	fi
	url="${args[*]%'--zigzag-xterm'*}"
	parameters="${args[*]#*'--zigzag-xterm'}"
	parameters="${parameters%'--cwd'*}"
	if [ -e "/cygdrive" ]; then
	    dest_dir="${args[*]#*'--cwd'}"
	    dest_dir=$(cygpath -u "$dest_dir")
	    [ ! -z "$dest_dir" ] && cd "$dest_dir"
	    $prog "$url" $parameters --stop
	else
	    xterm -tn "xterm-256color" -fa "XTerm*faceName: xft:Dejavu Sans Mono:pixelsize=12" +bdc -fg grey -bg black -title "ZigzagDownLoader in $PWD" -e "/bin/bash -i -c \"export pid_prog=\$$ ; zdl $parameters \\\"$url\\\" --stop \"" &
	fi
	exit
    else
	unset args
    fi
fi


if [ "${args[*]}" != "${args[*]//--stream}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == "--stream" ]; then 
	## zdl --stream [URL] [FNAME] [FOLDER] [CFILE] [COOKIE] [REFERER]
	## zdl --stream [URL] [FNAME] --noXterm
	    if [ -z "$DISPLAY" ]; then
		export DISPLAY=":0"
	    fi
	    url_in="$2"
	    url_in="${url_in// /20%}"	    
	    test_dir_3="$3"
	    test_dir_4="$4"
	    if [ -e "/cygdrive" ]; then
		test_dir_3=$(cygpath -u "$test_dir_3")
		test_dir_4=$(cygpath -u "$test_dir_4")
	    fi 
	    if [ ! -d "$test_dir_3" ]; then
		file_in="$test_dir_3"
		if [ "$test_dir_4" != "--noXterm" ] && [ -d "$test_dir_4" ]; then
		    directory="$test_dir_4"
		fi
	    else
		directory="$test_dir_3"
		unset file_in
	    fi

	    if [ "$file_in" != "${file_in//'/'/}" ]; then
		if [ -z "$directory" ]; then
		    directory="${file_in%/*}"
		fi
		file_in="${file_in##*/}"
	    fi
	    file_in="${file_in// /_}"
	    file_in="${file_in##*/}"
	    file_in="${file_in::240}"
	    cfile="$5"
	    cookie="$6"
	    referer="$7"

	    if [ "$url_in" != "${url_in//nowvideo.}" ] && [ ! -e "/cygdrive" ]; then
		referer="$6"
		ext="${file_in##*.}"
		file_in2=`wget "$referer" -O - -q | grep "&amp;title="`
		file_in2="${file_in2#*'&amp;title='}"
		file_in2="${file_in2::240}"
		[ ! -z "$file_in2" ] && file_in2="${file_in2// /_}" && file_in="${file_in2%%\"*}.$ext"
	    fi

	    cd "$directory"
	    mkdir -p "${path_tmp}"
	    
	    if [ -e "$cfile" ]; then cat "$cfile" >> "$path_tmp/flashgot_cfile.zdl" ; fi
	    echo -e "$cookie" > "$path_tmp/flashgot_cookie.zdl"

	    url_in="${url_in%'#20%'}"
	    echo "$url_in" > "${path_tmp}/filename_${file_in}.txt" 
	    if [ "$4" == "--noXterm" ] || [ -e "/cygdrive" ]; then
		export pid_prog=$$
		check_instance_prog
		if [ "$?" == "1" ]; then
		    links_loop + "$url_in"
		    xterm_stop=true
		    links="$url_in"
		    redirect_links
		else
		    $prog "$url_in" $stream_params --stop
		fi
	    else
		xterm -tn "xterm-256color" -fa "XTerm*faceName: xft:Dejavu Sans Mono:pixelsize=12" +bdc -fg grey -bg black -title "ZigzagDownLoader in $PWD" -e "/bin/bash -i -c \"export pid_prog=\$$ ; $prog \\\"$url_in\\\" $stream_params --stop\"" &
	    fi
	    exit
	fi
    done 
fi

## --stop deve precedere --mp3|--flac
if [ "${args[*]}" != "${args[*]//--stop}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == "--stop" ]; then 
	    unset args[$i]
	    xterm_stop=true
	fi
    done
fi


if [[ "${args[*]}" =~ (--mp3|--flac) ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(--mp3|--flac)$ ]]; then 
	    if [ -z "$(command -v ffmpeg 2>/dev/null)$(command -v avconv 2>/dev/null)" ]; then
		print_c 3 "La funzione di conversione in formato dipende da ffmpeg o da avconv, non trovati"
		exit
	    fi
	    format=${args[$i]##*-}
	    unset args[$i]
	    rm -f "$path_tmp"/pid.zdl
	    file_output=".file_output.zdl"
	    export pid_prog=$$
	    $prog ${args[*]} --out="$file_output"

	    [ ! -z "$(command -v avconv 2>/dev/null)" ] && convert2format="avconv"
	    [ ! -z "$(command -v ffmpeg 2>/dev/null)" ] && convert2format="ffmpeg"
	    echo
	    header_box "Conversione in $format ($convert2format)"
	    echo
	    for ((i=1; i<=$(wc -l < $file_output); i++)); do
		line=$(sed -n ${i}p < $file_output)
		if [[ "$(file --mime-type $line -d ' ' -f 2 $line 2>/dev/null)" =~ (audio|video) ]]; then
		    print_c 4 "Conversione del file: $line"
		    $convert2format -i "$line" "${line%mp4}$format" && rm "$line" && print_c 1 "Conversione riuscita: ${line%mp4}$format" || print_c 3 "Conversione NON riuscita: $line"
		    echo
		fi
	    done
	    rm "$file_output"
	    [ "$xterm_stop" == true ] && xterm_stop
	    exit
	fi
    done
fi


if [ "${args[*]}" != "${args[*]//--daemon}" ] || [ "${args[*]}" != "${args[*]//-d}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == "--daemon" ] || [ "${args[$i]}" == "-d" ]; then
	    unset args[$i]
	    check_instance_prog
	    if [ $? != 1 ]; then
		check_instance_daemon
		if [ $? != 1 ]; then
		    nohup /bin/bash $prog ${args[*]} --silent $PWD &>/dev/null &
		    header_z
		    print_c 1 "$PROG è stato avviato come demone: puoi controllarlo dalla stessa directory ($PWD) attraverso $PROG interactive --> \"$prog -i\"\n"
		    mkdir -p "$path_tmp"
		else
		    header_z
		    print_c 3 "Esiste già un'istanza attiva del demone di $PROG in $PWD\n"
		    add=true
		fi
	    fi

	    [ ! -z "$xterm_stop" ] && xterm_stop
	    exit
	fi
    done
fi


export pid_prog=$$

if [ "${args[*]}" != "${args[*]//--help}" ] || [ "${args[*]}" != "${args[*]//-h}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == "--help" ] || [ "${args[$i]}" == "-h" ]; then 
	    unset args[$i]
	    usage
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--interactive}" ] || [ "${args[*]}" != "${args[*]//-i}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--interactive' ] || [ "${args[$i]}" == '-i' ]; then 
	    unset args[$i]
	    interactive
	fi
    done
fi
## se non è modalità interattiva, allora sono validi i comandi "standard"
bindings

################################### HEADER
if [ ! -f "$path_conf/noclear" ]; then 
    fclear
else
    rm "$path_conf/noclear"
fi
header_z
###################################


if [ "${args[*]}" != "${args[*]//--update}" ] || [ "${args[*]}" != "${args[*]//-u}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--force' ] || [ "${args[$i]}" == '-f' ]; then
	    unset args[$i]
	    rm -f "$path_conf"/*.sig
	fi
    done
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--update' ] || [ "${args[$i]}" == '-u' ]; then
	    unset args[$i]
	    update_updater
	fi
    done
elif [ "$autoupdate" == "enabled" ] && [ "${args[*]}" == "${args[*]//--interactive}" ] && [ "${args[*]}" == "${args[*]//-i}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--force' ] || [ "${args[$i]}" == '-f' ]; then
	    unset args[$i]
	    rm "$path_conf"/*.sig
	fi
    done
    update_updater
fi

if [ "${args[*]}" != "${args[*]//--reconnect}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == "--reconnect" ]; then
	    unset args[$i]
	    reconnect_sh=true
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--multi}" ] || [ "${args[*]}" != "${args[*]//-m}" ]; then 
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--multi' ] || [ "${args[$i]}" == '-m' ]; then 
	    unset args[$i]
	    multi=true
	    if [[ "${args[$(( $i+1 ))]}" =~ [0-9] ]] && [ -z "${args[$(( $i+1 ))]//[0-9]}" ]; then
		num_multi="${args[$(( $i+1 ))]}"
		unset args[$(( $i+1 ))]
		echo $num_multi > "$path_tmp/.dl-mode"
	    fi
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--ip}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--ip' ]; then 
	    unset args[$i]
	    my_ip
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--login}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--login' ]; then 
	    unset args[$i]
	    login=1
	fi
    done
fi


if [ "${args[*]}" != "${args[*]//--wget}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--wget' ]; then 
	    unset args[$i]
	    downloader_in=Wget
	    echo $downloader_in > "$path_tmp/.downloader"
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--axel}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--axel' ]; then 
	    unset args[$i]
	    downloader_in=Axel
	    echo $downloader_in > "$path_tmp/.downloader"
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--clean}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" == '--clean' ]; then 
	    unset args[$i]
	    ( rm -r "$path_tmp"/* 2>/dev/null && print_c 1 "File temporanei cancellati" ) || ( print_c 3 "Pulizia file temporanei non effettuata (file inesistenti)" )
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--configure}" ] || [ "${args[*]}" != "${args[*]//-c}" ]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(\-\-configure|\-c)$ ]]; then 
	    unset args[$i]
	    configure
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--out=}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" != "${args[$i]#'--out='}" ]; then
	    if [ -e "$(command -v $(echo ${args[$i]#'--out='} | awk '{print $1}') 2>/dev/null)" ]; then
		pipe_out="${args[$i]#'--out='}"
	    else
		file_output=.file_output.zdl
		print_out="${args[$i]#'--out='}"

		if [ "$print_out" != "$file_output" ]; then
		    print_c 3 "Il file in ${print_out} non esiste"
		    print_c 2 "Scrivo in ${print_out} la lista dei file scaricati? (s|*)"
		    read -n 1 option_out
		fi
		if [ "$print_out" == "$file_output" ] || [ "$option_out" == "s" ]; then
		    [ "$print_out" != "$file_output" ] && print_c 1 "\n\nLa lista dei file verrà salvata in $print_out\n(puoi anche usarla per comunicare i file in scaricamento a un altro programma)\n"
		    touch "$print_out"
		    unset option_out
		fi
	    fi
	    unset args[$i]
	fi
    done
fi

if [ "${args[*]}" != "${args[*]//--proxy}" ]; then
    for i in `seq 0 $max_args`; do
	if [ "${args[$i]}" != "${args[$i]#'--proxy'}" ]; then
	    
	    if [ "${args[$i]}" == '--proxy' ]; then
		update_proxy=true
		unset args[$i]
		break
	    elif [ "${args[$i]}" == '--proxy=t' ]; then
		proxy_types[${#proxy_types[*]}]="Transparent"
		update_proxy=true
	    elif [ "${args[$i]}" == '--proxy=a' ]; then
		proxy_types[${#proxy_types[*]}]="Anonymous"
		update_proxy=true
	    elif [ "${args[$i]}" == '--proxy=e' ]; then
		proxy_types[${#proxy_types[*]}]="Elite"
		update_proxy=true
	    elif [ "${args[$i]}" != "${args[$i]%'='*}" ]; then
		proxy="${args[$i]#'--proxy='}"
		if [ -z "${proxy//[0-9.:]}" ]; then
		    export http_proxy=$proxy
		    defined_proxy=$proxy
		    print_c 1 "Proxy attivo: $http_proxy"
		    update_defined_proxy=true
		    unset update_proxy
		else
		    print_c 3 "${args[$i]}: argomento non valido"
		    echo
		    usage
		fi
	    else
		print_c 3 "${args[$i]}: argomento non valido"
		echo
		usage
	    fi
	    unset args[$i]
	fi
    done
fi

if [[ "${args[*]}" =~ (-r|--resume) ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(-r|--resume)$ ]]; then 
	    unset args[$i]
	    resume=enabled
	fi
    done
fi

if [[ "${args[*]}" =~ \-\-no-file=[^\ ]+ ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(--no-file=[^\ ]+)$ ]]; then
	    no_file_regex=$(sed -r 's;--no-file=["]*(.+)["]*$;\1;g' <<< "${args[$i]}")
	    unset args[$i]
	fi
    done
fi

if [[ "${args[*]}" =~ \-\-file=[^\ ]+ ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(--file=[^\ ]+)$ ]]; then
	    file_regex=$(sed -r 's;--file=["]*(.+)["]*$;\1;g' <<< "${args[$i]}")
	    unset args[$i]
	fi
    done
fi

if [[ "${args[*]}" =~ \-\-no-rev ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(--no-rev)$ ]]; then
	    no_file_regex='\.rev&'
	    unset args[$i]
	fi
    done
fi

if [[ "${args[*]}" =~ \-\-no-sub ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(--no-sub)$ ]]; then
	    no_file_regex='[Ss]ub'
	    unset args[$i]
	fi
    done
fi


if [[ "${args[*]}" =~ \-\-no-complete ]]; then
    for i in `seq 0 $max_args`; do
	if [[ "${args[$i]}" =~ ^(--no-complete)$ ]]; then
	    no_complete=true
	    unset args[$i]
	fi
    done
fi


for i in `seq 0 $max_args`; do
    if [ "${args[$i]}" != "${args[$i]#-}" ]; then
	print_c 3 "${args[$i]}: argomento non valido"
	echo
	usage
    fi
done


if [ ! -z "${args[*]}" ]; then
    COOKIE="$path_tmp/flashgot_cfile.zdl"
    for i in `seq 0 $max_args`; do
	if [ -f "${args[$i]}" ]; then
	    if [ "${args[$i]}" != "${args[$i]%.dlc}" ]; then
		add_container $(cat "${args[$i]}") # container_file)
	    else
		links=$(cat "${args[$i]}")
		echo -e "${links// /%20}" >> "$path_tmp"/links_loop.txt
	    fi
	elif [ ! -z "${args[$i]}" ]; then
	    args[$i]="${args[$i]%'#20%'}"
	    args[$i]="${args[$i]// /%20}"
	    link_parser "${args[$i]}"
	    if [ "$?" == 1 ]; then
		echo -e "${args[$i]}" >> "$path_tmp"/links_loop.txt
		if [ -z "$links" ]; then
		    links="${args[$i]}"
		else
		    links="${links}\n${args[$i]}"
		fi
	    else
		_log 12 "${args[$i]}"
	    fi
	fi
    done
    if [ -f "$path_tmp"/links_loop.txt ];then 
	start_file="$path_tmp/links_loop.txt"
	clean_file "$start_file"
	echo >> links.txt 2>/dev/null
	date >> links.txt 2>/dev/null
	cat "$start_file" >> links.txt 2>/dev/null
	print_c 1 "L'elenco completo dei link è in links.txt"
    fi
fi

if [ -f "$path_tmp/.downloader" ]; then
    downloader_in=$(cat "$path_tmp/.downloader")
else
    echo $downloader_in > "$path_tmp/.downloader"
fi
[ "$daemon" != "true" ] && print_c 0 "\n${BBlue}Downloader:${Color_Off} $downloader_in\t${BBlue}Directory:${Color_Off} $PWD\n"

if [ -z "$start_file" ]; then # && [ "$daemon" != "true" ]; then
    start_file="$path_tmp/links_loop.txt"
    check_instance_prog
    if [ $? != 1 ]; then
	echo "$pid_prog" > "$path_tmp/pid.zdl"
    fi
    if [ -z "$from_editor" ] && [ -z "$daemon" ]; then
	links_box
	bind -x "\"\C-l\":\"\"" 2>/dev/null
	bind -x "\"\ex\":\"binding=1\"" 2>/dev/null
	while true; do
	    case $binding in
		1) unset binding; break ;;
	    esac
	    read -e links[${#links[*]}]
	done
	for ((i=0; i<${#links[*]}; i++)); do
	    [ ! -z "${links[$i]// }" ] && links_loop + "${links[$i]// /%20}"
	done
    elif [ ! -z "$from_editor" ]; then
	$editor "$start_file"
    fi
    if [ -f "$start_file" ];then
	clean_file "$start_file"
	if [ -f "$start_file" ];then
	    cat "$start_file" >> links.txt
	else
	    if [ "$daemon" != "true" ]; then
		print_c 3 "$name_prog: nessun link da processare in $PWD"
		rm -r "$path_tmp"
		exit
	    fi
	fi
	print_c 0
    else
	rm -f "$path_tmp/rewriting"
    fi
fi

check_instance_daemon
if [ $? == 1 ] && [ -z "$daemon" ]; then
    redirect_links
fi

# check_instance s
# if [ $? == 3 ]; then
#     redirect_links
# fi
check_instance_prog
if [ $? == 1 ]; then
    redirect_links
else
    echo "$pid_prog" > "$path_tmp/pid.zdl"
fi

rm -f "$path_tmp/.stop_stdout"
echo "$downloader_in" > "$path_tmp/.downloader"

function main_loop {
    if [ "$daemon" == "true" ] && [ ! -f "$start_file" ]; then
    	start_file="$path_tmp/links_loop.txt"
    	sleep 10
    elif [ -f "$start_file" ] && [ -z "$zdl_exit" ]; then
	links_in=$(cat "$start_file")
	if [ -f "$path_tmp/.dl-mode" ];then
	    multi=true
	    [[ $(cat "$path_tmp/.dl-mode") =~ ^([0-9]+)$ ]] && num_multi=${BASH_REMATCH[1]}
	    [ "$num_multi" == 1 ] && unset multi 
	fi

	for url_in in $links_in; do
	    link_parser "${url_in}"
	    if [ "$?" != 1 ]; then
		links_loop - "$url_in"
		_log 12 "$url_in"
		unset url_in
		break
	    fi
	    print_c 4 "checking $url_in ..."
	    unset pid_in checked file_in url_in_file

	    if [ -f "$path_tmp/.downloader" ]; then
		downloader_in=$(cat "$path_tmp/.downloader")
	    fi
	    [ "$no_complete" == true ] && clean_completed
	    check_in_url
	    if [ $? != 1 ]; then
		axel_parts=$axel_parts_conf
		url_in="${url_in## }"
		url_in="${url_in%% }"

		print_c 0
		header_box "Link da processare:"
		print_c 0 "$url_in\n"

		print_c 1 "Connessione in corso..."

		check_ip
		## user extensions
		if [ -d "$path_conf/extensions/" ]; then
		    shopt -s nullglob
		    for srcfile in "$path_conf"/extensions/*.sh; do
			source "$srcfile"
		    done
		    shopt -u nullglob
		fi
		##################

		echo > "$path_tmp"/zdl.tmp > "$path_tmp"/zdl2.tmp

		## PROG extensions
		if [ -d "$path_usr/extensions/" ]; then
		    shopt -s nullglob
		    for srcfile in "$path_usr"/extensions/*.sh; do
			source "$srcfile"
		    done
		    shopt -u nullglob
		fi
		###################

		if [ "$break_loop" == "true" ]; then
		    unset break_loop
		    break
		fi

		if [ -z "$file_in" ] || [ -z "$url_in_file" ]; then
		    if [ "$update_proxy_others_list" == "true" ]; then
			new_ip_proxy
		    fi
		    
		    if data_stdout
		    then 
			for ((j=0; j<${#pid_out[*]}; i++))
			do
			    if [ "$url_in" == "${url_out[$j]}" ]; then
				file_in="${file_out[$j]::240}"
				break
			    fi
			done
		    fi	
		 
		## streaming downloader
		    items=( $(ls "$path_tmp"/filename_* 2>/dev/null) )
		    for item in ${items[*]}; do
			url=`cat "$item"`
			if [ "${url%% }" == "$url_in" ]; then
			    item="${item// /_}"
			    file_in="${item#*filename_}"
			    file_in="${file_in::240}"
			    file_in="${file_in%.txt}"
			    break
			fi
		    done
		    
		## universal downloader
		    if [ -z "$file_in" ] && [ -z "$url_in_file" ]; then
			file_in="${url_in##*'/'}"
			file_in="${file_in%'?'*}"
			file_in="${file_in%%'&'*}"
		    fi
		    url_in_file="${url_in%% }"
		    url_in_file="${url_in_file## }"
		    
		    if [ "$update_proxy_others" == "true" ]; then
			update_proxy_others_list="true"
		    fi
		    
		fi

		sanitize_file_in

       		#### CHECK $url_in_file & $file_in:
		if check_freespace
		then
		    check_in_file
		    test_in="$?"
		else
		    break_loop="true"
		    zdl_exit="true" 
		fi

		## opzioni filtro
		if [ ! -z "$no_file_regex" ] && [[ "$file_in" =~ $no_file_regex ]]; then
		    _log 13
		fi
		if [ ! -z "$file_regex" ] && [[ ! "$file_in" =~ $file_regex ]]; then
		    _log 14
		fi

		#### DOWNLOAD ####
		if [ "$test_in" == "5" ] && [ -z "$premium" ] && \
		    ( [ -z "$no_file_regex" ] || [[ ! "$file_in" =~ $no_file_regex ]] ) && \
		    ( [ -z "$file_regex" ] || [ "$file_in" =~ $file_regex  ] ) && \
		    [ -z "$break_loop" ] && \
		    [[ $(grep ^"$url_in"$ "$path_tmp/links_loop.txt") ]]
		then
		    unset test_in
		    download
		    is_rtmp "$url_in"
		    if [ "$?" == 1 ]; then
			print_c 4 "Streamer: $streamer\nPlaypath: $playpath\n"
		    else
			print_c 4 "URL del file: $url_in_file"
		    fi
		    if check_pid ${pid_in}
		    then
			print_c 1 "downloading --> $file_in ..."
		    fi		    
		    while true; do
			show_downloads
			check_download
			if [ $? == 1 ]; then
			    break
			fi
			if ! check_pid ${pid_in}
			then
			    break
			fi
		    done
		    rm -f "$path_tmp/cookies.zdl"
		    unset no_newip
		    check_freespace
		    check_alias
		else
		    sleeping 1
		fi
		
		if [ ! -f "$path_tmp/${file_in}_stdout.tmp" ] && [ -f "${file_in}" ] && [ ! -f "${file_in}.st" ]; then
		    links_loop - "$url_in"
		fi

		newip_add_provider
		from_loop=true
		[ "$ch_dler" == "1" ] && downloader_in=$dler && unset ch_dler
		noproxy
		check_stdout
		show_downloads
		unset checked
		if [ -f "$path_tmp/.dl-mode" ];then
		    multi=true
		    [[ $(cat "$path_tmp/.dl-mode") =~ ^([0-9]+)$ ]] && num_multi=${BASH_REMATCH[1]}
		    [ "$num_multi" == 1 ] && unset multi 
		fi
		[ -z "$counter_downloading" ] && counter_downloading=0
		if [ "$multi" == "true" ] && ( [ -z "$num_multi" ] || (( "$counter_downloading" < "$num_multi" )) ); then
		    checked=1
		fi
		while [ "$checked" != "1" ]; do 
		    pipe_files
		    check_pid $pid_in
		    test_pid=$?
		    links_loop "in" "$url_in"
		    test_loop_in=$?
		    if [ "$test_loop_in" != 1 ] || [ "$test_pid" != 0 ] || ( [ ! -z "$num_multi" ] && (( $counter_downloading < $num_multi )) ); then 
			break
		    fi
		    check_stdout
		    show_downloads
		    if [ -f "$path_tmp/.dl-mode" ];then
			multi=true
			[[ $(cat "$path_tmp/.dl-mode") =~ ^([0-9]+)$ ]] && num_multi=${BASH_REMATCH[1]}

			[ "$num_multi" == 1 ] && unset multi 
		    fi
		done

		unset checked break_loop post_data goal not_available exceeded 
	    fi
	done
	print_c 4 "checking loop..."
	sleeping 3
	clean_file "$path_tmp"/links_loop.txt

	pipe_files
	if [ -f "$path_tmp/links_loop.txt" ]; then
	    start_file="$path_tmp/links_loop.txt"
	fi
	check_stdout
	[ -z "$no_msg" ] && show_downloads
	unset no_msg
    else 
	return 1
    fi
}

trap_sigint
if [ "$daemon" == "true" ]; then
    while true; do
	main_loop
	[ $? == 1 ] && break
    done
else
    while true; do
	main_loop
	[ $? == 1 ] && break
    done 2>/dev/null &
    loops_pid=$!
fi

if [ "$daemon" != true ]; then
    stty -echo
    bindings
    while true; do
	if check_pid $loops_pid
	then
	    read -e -n 1 -t 1 binding_in_loop 
	else
	    break
	fi
    done
fi

wait $loops_pid
noproxy

separator-
print_c 1 "Download completato"
separator-

if [ ! -z "$pipe_out" ] && [ "$pipe_done" != 1 ]; then
    data_stdout
    pipe_files
fi

if [ "$zdl_exit" != "true" ]; then
	rm -rf "$path_tmp" 2>/dev/null
else
    kill_downloads
fi

echo -e "\n\n"
stty echo
if [ -f "$file_log" ]; then
    print_c 3 "In $PWD è presente un file che contiene un elenco di operazioni di $PROG terminate senza successo."
    print_c 0 "${BBlue}Per leggerlo, digita:${Color_Off}\n${Bold}cat $PWD/$file_log${Color_Off}\n\n"
fi


if [ "$xterm_stop" == "true" ]; then
    xterm_stop
fi
echo -e -n "\e[0m\e[J"

